#!/usr/bin/env bash

VERSION=0.1.14

root=$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")/.." && pwd -P)
source "$root/.bpan/lib/bpan.bash" --app
bpan:source bashplus
bpan:source getopt "\
$app [<opt...>]

Example:

  $app < foo.md > man/man1/foo.1

Options:
--
# pandoc        Use 'pandoc' to format Markdown
# ronn          Use 'ronn' to format Markdown
pod           Output POD instead of nroff
man           Show output in 'man' manpage viewer

h,help        Show the command summary
version       Display $app version
x,debug       Print lots of debugging info
"

# XXX Currently unable to produce readable manpages with ronn.

main() (
  getopt "$@"

  if $option_version; then
    echo "$app v$VERSION"
    exit
  fi

#   if $option_pandoc && $option_ronn; then
#     error "Using both --pandoc and --ronn doesn't make sense"
#   fi

  (
    if $option_pod; then
      convert:pod
#     elif $option_pandoc; then
#       convert:pandoc
#     elif $option_ronn; then
#       convert:ronn
    else
      +is-cmd pandoc ||
        die "md2man requires pandoc"
#       if +is-cmd pandoc; then
#         convert:pandoc
#       elif +is-cmd ronn; then
#         convert:ronn
#       else
#         die "$app requires either pandoc or ronn..."
#       fi
    fi
  ) | (
    if $option_man && ! $option_pod; then
      file=$(mktemp /tmp/XXXXXX.1)
      +trap "rm $file"
      set -x
      cat > "$file"
      man "$file"
    else
      cat
    fi
  )
)

convert:pandoc() (
  pandoc --from=gfm --to=json |
    pandoc-ast-to-pod |
    pod2man |
    fix-nroff
)

convert:ronn() (
  ronn -r
)

convert:pod() (
  pandoc --from=gfm --to=json |
    pandoc-ast-to-pod
)

fix-nroff() (
  "$(command -v perl)" <(cat <<'...'
use strict;
use warnings;

my $num  = $ENV{MD2MAN_NUM}  || '1';
my $name = $ENV{MD2MAN_NAME} || 'topic';
my $desc = $ENV{MD2MAN_DESC} || 'Description of Topic';
my $prog = $ENV{MD2MAN_PROG} || 'md2man';

my $text = do { local $/; <STDIN> };
$text =~ s{
    ^ \.TH\ .*? (\d{4}-\d{2}-\d{2}) .*
        "User\ Contributed\ Perl\ Documentation" .*
}{.TH "$name" $num "$1" "$prog" "$desc"}mx;

print $text;
...
)
)

pandoc-ast-to-pod() (
  "$(command -v perl)" <(cat <<'...'
use strict;
use warnings;

use JSON::PP;

my $o = bless {};

sub run {
    my ($self) = @_;
    my $json = do { local $/; <STDIN> };
    my $ast = decode_json $json;
    binmode(STDOUT, ":utf8");
    print $self->fmt_pod($ast);
}

sub fmt_pod {
    my ($self, $ast) = @_;

    my $text =
        "=pod\n\n" .
        "=encoding utf8\n\n" .
        $self->fmt($ast->{blocks}) .
        "=cut\n";

    # Ensure blank line before pod directive.
    # From a bug seen on a mac.
    $text =~ s/([^\n]\n)(=\w+( |$))/$1\n$2/mg;

    $text =~ s/\n{3,}/\n\n/g;

    return $self->fix_name_heading($text);
}

sub fix_name_heading {
    my ($self, $text) = @_;

    $text =~ s{\A
        =head1\s+(.*) \n\n
        (\S.*) \n\n
        (?==head)
    }{
        "=head1 NAME\n\n" .
        "$1 - $2\n\n"
    }ex;

    return $text;
}

sub tc {
    my ($self, $node) = @_;
    ZZZ $node unless ref($node) eq 'HASH';
    my ($t, $c) = @{$node}{qw't c'};
    ZZZ $node unless $t;
    $t = lc($t);
    $c //= [];
    return ($t, $c);
}

sub fmt {
    my ($self, $nodes) = @_;
    my $o = '';
    for my $node (@$nodes) {
        my ($t, $c) = $self->tc($node);
        my $method = "fmt_$t";
        if ($self->can($method)) {
            $o .= $self->$method($c);
        }
        else {
            $self->error($t, $c);
        }
    }
    return $o;
}

sub error {
    my ($self, $type, $content) = @_;
    warn "No md2man formatter for pandoc node type '$type'.\n";
    warn "\nData for this node was:\n\n";
    if (eval "require XXXX; 1") {
        XXX:XXX($content);
    }
    require Data::Dumper;
    no warnings 'once';
    $Data::Dumper::Terse = 1;
    die Data::Dumper::Dumper($content);
}

sub fmt_header {
    my ($self, $args) = @_;
    my ($level, $x, $list) = @$args;
    my $heading = $self->fmt($list);
    $heading = uc $heading if $level <= 2;
    return "=head$level $heading\n\n";
}

sub fmt_str {
    my ($self, $str) = @_;
    $str;
}

sub fmt_space {
    ' ';
}

sub fmt_para {
    my ($self, $list) = @_;
    $self->fmt($list) . "\n\n";
}

sub phrase {
    my ($self, $style, $text) = @_;
    $text =~ /(<<<<<|<<<<|<<<|<<|<|)/ or die;
    my $num = length($1) + 1;
    return (
        $style .
        ('<' x $num) .
        $text .
        ('>' x $num)
    )
}

sub fmt_link {
    my ($self, $args) = @_;
    my ($x, $text, $link) = @$args;
    $link = $link->[0];
    if ($text) {
        $text = $self->fmt($text);
        return $self->phrase(L => "$text|$link");
    }
    else {
        return $self->phrase(L => "$link");
    }
}

sub fmt_code {
    my ($self, $args) = @_;
    my ($x, $text) = @$args;
    $self->phrase(C => $text);
}

sub fmt_strong {
    my ($self, $list) = @_;
    $self->phrase(B => $self->fmt($list));
}

sub fmt_emph {
    my ($self, $list) = @_;
    $self->phrase(I => $self->fmt($list));
}

sub fmt_strikeout {
    my ($self, $list) = @_;
    $self->fmt($list);
}

sub fmt_codeblock {
    my ($self, $args) = @_;
    my ($x, $code) = @$args;
    my $o = "$code\n";
    $o =~ s/^(.)/    $1/gm;
    return "$o\n";
}

sub make_list {
    my ($self, $bullet, $items) = @_;

    my $o = "=over\n\n";
    for my $item (@$items) {
        $o .= "=item $bullet " .
            $self->fmt($item)
    }
    $o .= "=back\n\n";
    return $o;
}

sub fmt_bulletlist {
    my ($self, $items) = @_;

    return $self->make_list('*' => $items);
}

sub fmt_orderedlist {
    my ($self, $args) = @_;
    my ($x, $items) = @$args;

    return $self->make_list('1.' => $items);
}

sub fmt_plain {
    my ($self, $list) = @_;
    $self->fmt($list) . "\n\n";
}

sub fmt_horizontalrule {
    return "=for html <hr/>\n\n";
}

sub fmt_softbreak {
    return ' ';
}

sub fmt_rawblock {
    my ($self, $rawblock) = @_;
    if ($rawblock->[0] eq 'html' and
        $rawblock->[1] =~ /^<!--/
    ) {
        return '';
    } else {
        use Data::Dumper;
        die "Don't know how to format 'rawblock':\n" .
          Data::Dumper::Dumper($rawblock);
    }
}

$o->run(@ARGV);
...
)
)

main "$@"
